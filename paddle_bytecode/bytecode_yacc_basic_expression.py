# Do not edit directly. This file is generated by tools/generate_yacc_basic_expression_class.py
class BytecodeYaccBasicExpression:

    def p_basic_expression_UNARY_POSITIVE(self, p):
        'expression : UNARY_POSITIVE expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_UNARY_NEGATIVE(self, p):
        'expression : UNARY_NEGATIVE expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_UNARY_NOT(self, p):
        'expression : UNARY_NOT expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_UNARY_INVERT(self, p):
        'expression : UNARY_INVERT expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_MATRIX_MULTIPLY(self, p):
        'expression : BINARY_MATRIX_MULTIPLY expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_MATRIX_MULTIPLY(self, p):
        'expression : INPLACE_MATRIX_MULTIPLY expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_POWER(self, p):
        'expression : BINARY_POWER expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_MULTIPLY(self, p):
        'expression : BINARY_MULTIPLY expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_MODULO(self, p):
        'expression : BINARY_MODULO expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_ADD(self, p):
        'expression : BINARY_ADD expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_SUBTRACT(self, p):
        'expression : BINARY_SUBTRACT expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_SUBSCR(self, p):
        'expression : BINARY_SUBSCR expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_FLOOR_DIVIDE(self, p):
        'expression : BINARY_FLOOR_DIVIDE expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_TRUE_DIVIDE(self, p):
        'expression : BINARY_TRUE_DIVIDE expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_FLOOR_DIVIDE(self, p):
        'expression : INPLACE_FLOOR_DIVIDE expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_TRUE_DIVIDE(self, p):
        'expression : INPLACE_TRUE_DIVIDE expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_GET_AITER(self, p):
        'expression : GET_AITER expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_ADD(self, p):
        'expression : INPLACE_ADD expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_SUBTRACT(self, p):
        'expression : INPLACE_SUBTRACT expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_MULTIPLY(self, p):
        'expression : INPLACE_MULTIPLY expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_MODULO(self, p):
        'expression : INPLACE_MODULO expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_LSHIFT(self, p):
        'expression : BINARY_LSHIFT expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_RSHIFT(self, p):
        'expression : BINARY_RSHIFT expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_AND(self, p):
        'expression : BINARY_AND expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_XOR(self, p):
        'expression : BINARY_XOR expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_BINARY_OR(self, p):
        'expression : BINARY_OR expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_POWER(self, p):
        'expression : INPLACE_POWER expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_GET_ITER(self, p):
        'expression : GET_ITER expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_GET_YIELD_FROM_ITER(self, p):
        'expression : GET_YIELD_FROM_ITER expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_GET_AWAITABLE(self, p):
        'expression : GET_AWAITABLE expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_LSHIFT(self, p):
        'expression : INPLACE_LSHIFT expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_RSHIFT(self, p):
        'expression : INPLACE_RSHIFT expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_AND(self, p):
        'expression : INPLACE_AND expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_XOR(self, p):
        'expression : INPLACE_XOR expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


    def p_basic_expression_INPLACE_OR(self, p):
        'expression : INPLACE_OR expression expression'
        p[0] = self.parse_basic_expression(list(p[2:])[::-1], p[1])


